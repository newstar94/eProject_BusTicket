@model eProject_BusTicket.Models.Trip

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<span>@ViewBag.Alert</span>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Trip</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        <label class="control-label col-md-2">TypeID</label>
        <div class="col-md-10">
            @Html.DropDownList("TypeID", null, htmlAttributes: new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.VehicleID, "VehicleID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("VehicleID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.VehicleID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Name, "Name", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control"} })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OriginID, "OriginID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("OriginID", null, "Select Origin", htmlAttributes: new { @class = "form-control", @onchange = "fillSelectArr(),calculate()" })
            @Html.ValidationMessageFor(model => model.OriginID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DestinationID, "DestinationID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("DestinationID", null, "Select Destination", htmlAttributes: new { @class = "form-control drop", @onchange = "calculate()" })
            @Html.ValidationMessageFor(model => model.DestinationID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DepartureTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DepartureTime, new { htmlAttributes = new { @class = "form-control", @type = "datetime-local", @min = DateTime.Now.ToString("yyyy-MM-ddTHH:mm") } })
            @Html.ValidationMessageFor(model => model.DepartureTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.TripTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TripTime, new { htmlAttributes = new { @class = "form-control", @onchange = "calculate ()" } })
            @Html.ValidationMessageFor(model => model.TripTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="display: none">
        @Html.LabelFor(model => model.Distance, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Distance, new { htmlAttributes = new { @class = "form-control", @onchange = "calculate ()" } })
            @Html.ValidationMessageFor(model => model.Distance, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input id="create" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAuogEBliY0VtBWKhRmZ-nkNCwPt1ovgeE&libraries=places&callback=initMap&v=weekly"></script>

<script>
    function calculate () {
        var origin = $("#OriginID option:selected").text();
        var destination = $("#DestinationID option:selected").text();
        var service = new google.maps.DistanceMatrixService();
        service.getDistanceMatrix(
            {
                origins: [origin],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false,
            },
            callback
        );
        // get distance results
        function callback(response, status) {
            if (status == 'OK') {
                var distance = response.rows[0].elements[0].distance;
                console.log(distance);
                var duration = response.rows[0].elements[0].duration;
                console.log(duration);
                console.log(response.rows[0].elements[0].distance);
                var distance = (distance.value / 1000).toFixed(0);
                var duration_text = duration.text;
                document.getElementById("Distance").value = distance;
                document.getElementById("TripTime").value = duration_text;
            }
        }
    }
</script>